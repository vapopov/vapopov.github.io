<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vadym Popov</title>
    <link>/</link>
    <description>Recent content on Vadym Popov</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright (c) 2008 - 2014, Vadym Popov; all rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Oct 2019 11:58:08 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Certificate Authority With Hardware Token [Yubikey]</title>
      <link>/post/2019-03-10-certificate-authority/</link>
      <pubDate>Tue, 01 Oct 2019 11:58:08 +0200</pubDate>
      
      <guid>/post/2019-03-10-certificate-authority/</guid>
      <description>OpenSSL Certificate Authority Install dependencies for working with PKCS11 brew install yubico-piv-tool openssl@1.1 opensc libp11 Generating new Root CA certificate Definition of Root CA
First of all we need to generate private key to be used to generate public key for our new certificate. In current example used 2048 bits of rsa, this is related to limitation of specific hardware token.
openssl genrsa -out root-ca.pem 2048 We need to describe certificate definition in openssl configuration file root-ca.</description>
    </item>
    
    <item>
      <title>Git Gpg Verification</title>
      <link>/post/2017-08-12-git-gpg-verification/</link>
      <pubDate>Sat, 12 Aug 2017 19:20:06 +0200</pubDate>
      
      <guid>/post/2017-08-12-git-gpg-verification/</guid>
      <description>GPG and git on MacOS Setup  Install https://gpgtools.org Create or import a key &amp;ndash; see below for https://keybase.io Run gpg -K to see all private keys in current machine, use the key ID for the next step (each gpg key has subkeys with different capabilities, its better to choose subkey with sign S) Configure git to use GPG &amp;ndash; replace the key with the one from gpg --K  git config --global gpg.</description>
    </item>
    
    <item>
      <title>Query Planner</title>
      <link>/post/2017-08-12-query-planner/</link>
      <pubDate>Sat, 12 Aug 2017 19:20:06 +0200</pubDate>
      
      <guid>/post/2017-08-12-query-planner/</guid>
      <description>Types of index scans Indexes Sequential Scan:  Read every row in the table No reading of index. Reading from indexes is also expensive. Best way to access small tables, that fits in a single disk block. There is no point in this case to use the index. Block size in pg is 8K. Also the best way to read access all rows in a table.  Index Scan:  Index Scan or Bitmap Index Scan: Read the index, hoping that we won&amp;rsquo;t have to go to disk.</description>
    </item>
    
    <item>
      <title>Base usefull commands</title>
      <link>/post/2017-03-01-base-usefull-commands/</link>
      <pubDate>Fri, 21 Jul 2017 07:35:01 +0200</pubDate>
      
      <guid>/post/2017-03-01-base-usefull-commands/</guid>
      <description>Kubernetes Merging kubeconfig files:
KUBECONFIG=~/.kube/config:second.cfg kubectl config view --merge --flatten &amp;gt; config Extracting a context from a kubeconfig file:
KUBECONFIG=~/.kube/config kubectl config view \  --minify --flatten --context=context-1 &amp;gt; config Docker Mount portworx volume to the empty container
docker run -it --rm --volume-driver pxd -v name=hublndstaging:/data alpine sh Unix Filesystem Remove files that is older than 7 days with specified file mask
find /data/ -mtime +7 -name &amp;#34;*.gz&amp;#34; -exec rm {} \; Git base workflow Drop unused branches.</description>
    </item>
    
    <item>
      <title>Server optimisation for nginx</title>
      <link>/post/2017-06-01-nginx-optimization/</link>
      <pubDate>Fri, 21 Jul 2017 07:35:01 +0200</pubDate>
      
      <guid>/post/2017-06-01-nginx-optimization/</guid>
      <description>Optimisation to use nginx node Use the full range of ports. net.ipv4.ip_local_port_range = 1024 65535 net.ipv4.tcp_max_syn_backlog=4096 net.core.netdev_max_backlog=4096 net.core.somaxconn=1024 net.ipv4.tcp_keepalive_time=300 net.core.somaxconn=250000 net.ipv4.tcp_max_syn_backlog=2500 net.core.netdev_max_backlog=2500 net.ipv4.tcp_tw_reuse = 1 Bash resource initialisation echo &amp;#34;10152 65535&amp;#34; &amp;gt; /proc/sys/net/ipv4/ip_local_port_range sysctl -w fs.file-max=128000 sysctl -w net.ipv4.tcp_keepalive_time=300 sysctl -w net.core.somaxconn=250000 sysctl -w net.ipv4.tcp_max_syn_backlog=2500 sysctl -w net.core.netdev_max_backlog=2500 ulimit -n 10240 </description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>/post/welcome/</link>
      <pubDate>Thu, 20 Jul 2017 00:47:34 +0200</pubDate>
      
      <guid>/post/welcome/</guid>
      <description>This site is mostly notes, to store useful information. Its easier to find something using browser and have centralized storage and hosting by github.</description>
    </item>
    
  </channel>
</rss>